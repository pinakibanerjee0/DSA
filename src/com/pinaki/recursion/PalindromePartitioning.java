package com.pinaki.recursion;

import java.util.ArrayList;
import java.util.List;

public class PalindromePartitioning {

	/*
	 * 
	 * Problem Statement: You are given a string s, partition it in such a way that
	 * every substring is a palindrome. Return all such palindromic partitions of s.
	 * 
	 * Note: A palindrome string is a string that reads the same backward as
	 * forward.
	 * 
	 * Examples:
	 * 
	 * Example 1:
	 * 
	 * Input: s = “aab”
	 * 
	 * Output: [ ["a","a","b"], ["aa","b"] ]
	 * 
	 * Explanation: The first answer is generated by making three partitions. The
	 * second answer is generated by making two partitions.
	 * 
	 * Approach: The initial idea will be to make partitions to generate substring
	 * and check if the substring generated out of the partition will be a
	 * palindrome. Partitioning means we would end up generating every substring and
	 * checking for palindrome at every step. Since this is a repetitive task being
	 * done again and again, at this point we should think of recursion. The
	 * recursion continues until the entire string is exhausted. After partitioning,
	 * every palindromic substring is inserted in a data structure When the base
	 * case has reached the list of palindromes generated during that recursion call
	 * is inserted in a vector of vectors/list of list.
	 */

	public static List<List<String>> partition(String s) {
		List<List<String>> res = new ArrayList<>();
		List<String> path = new ArrayList<>();
		partitionHelper(0, s, path, res);
		return res;
	}

	static void partitionHelper(int index, String s, List<String> path, List<List<String>> res) {
		if (index == s.length()) {
			res.add(new ArrayList<>(path));
			return;
		}
		for (int i = index; i < s.length(); ++i) {
			if (isPalindrome(s, index, i)) {
				path.add(s.substring(index, i + 1));
				partitionHelper(i + 1, s, path, res);
				path.remove(path.size() - 1);
			}
		}
	}

	static boolean isPalindrome(String s, int start, int end) {
		while (start <= end) {
			if (s.charAt(start++) != s.charAt(end--))
				return false;
		}
		return true;
	}

	public static void main(String args[]) {
		String s = "aabb";
		List<List<String>> ans = partition(s);
		int n = ans.size();
		System.out.println("The Palindromic partitions are :-");
		System.out.print(" [ ");
		for (int i = 0; i < ans.size(); i++) {
			System.out.print("[ ");
			for (int j = 0; j < ans.get(i).size(); j++) {
				System.out.print(ans.get(i).get(j) + " , ");
			}
			System.out.print("] ");
		}
		System.out.print("]");

	}

}
